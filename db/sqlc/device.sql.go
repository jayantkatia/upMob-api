// Code generated by sqlc. DO NOT EDIT.
// source: device.sql

package db

import (
	"context"
)

const deleteDevices = `-- name: DeleteDevices :exec
DELETE FROM devices
`

func (q *Queries) DeleteDevices(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteDevices)
	return err
}

const getDevices = `-- name: GetDevices :many
SELECT device_name, expected, price, img_url, source_url, spec_score FROM devices
`

func (q *Queries) GetDevices(ctx context.Context) ([]Device, error) {
	rows, err := q.db.QueryContext(ctx, getDevices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.DeviceName,
			&i.Expected,
			&i.Price,
			&i.ImgUrl,
			&i.SourceUrl,
			&i.SpecScore,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertDevice = `-- name: InsertDevice :one
INSERT INTO devices (
    device_name,
    expected,
    price,
    img_url,
    source_url,
    spec_score
) VALUES (
    $1, $2, $3, $4, $5, $6
)RETURNING device_name, expected, price, img_url, source_url, spec_score
`

type InsertDeviceParams struct {
	DeviceName string `json:"device_name"`
	Expected   string `json:"expected"`
	Price      int64  `json:"price"`
	ImgUrl     string `json:"img_url"`
	SourceUrl  string `json:"source_url"`
	SpecScore  int32  `json:"spec_score"`
}

func (q *Queries) InsertDevice(ctx context.Context, arg InsertDeviceParams) (Device, error) {
	row := q.db.QueryRowContext(ctx, insertDevice,
		arg.DeviceName,
		arg.Expected,
		arg.Price,
		arg.ImgUrl,
		arg.SourceUrl,
		arg.SpecScore,
	)
	var i Device
	err := row.Scan(
		&i.DeviceName,
		&i.Expected,
		&i.Price,
		&i.ImgUrl,
		&i.SourceUrl,
		&i.SpecScore,
	)
	return i, err
}
